name: Deploy to Render

on:
  # Déploiement automatique après build Docker réussi
  workflow_run:
    workflows: ["Docker Build & Push"]
    types:
      - completed
    # Suppression de la restriction "branches" pour permettre les tags

  # Déploiement manuel avec sélection de version
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      image_tag:
        description: 'Docker image tag to deploy (leave empty for latest)'
        required: false
        type: string

jobs:
  deploy:
    name: Trigger Render Deploy
    runs-on: ubuntu-latest
    environment: render
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Docker image tag
        id: image_tag
        run: |
          # Détecter le tag à utiliser selon le contexte
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Déploiement manuel avec tag spécifié
            if [ -n "${{ inputs.image_tag }}" ]; then
              TAG="${{ inputs.image_tag }}"
            else
              TAG="latest"
            fi
          elif [ "${{ github.event.workflow_run.event }}" == "push" ]; then
            # Déploiement automatique après build Docker
            # Récupérer le ref qui a déclenché le workflow_run
            TRIGGER_REF="${{ github.event.workflow_run.head_branch }}"

            # Vérifier si c'est un tag de version (avec ou sans suffixe)
            if [[ "$TRIGGER_REF" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              TAG="$TRIGGER_REF"
              echo "📦 Tag de version détecté: $TAG"
            else
              TAG="latest"
              echo "📦 Branche main détectée, utilisation de: $TAG"
            fi
          else
            TAG="latest"
          fi

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "🏷️  Image Docker à déployer: ghcr.io/${{ github.repository }}:$TAG"

      - name: Wait for image availability
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.tag }}
        run: |
          echo "⏳ Attente de la disponibilité complète de l'image dans GHCR..."
          echo "Image cible: ghcr.io/${{ github.repository }}:${IMAGE_TAG}"
          echo ""
          echo "📊 Contexte:"
          echo "  - Le workflow Docker peut prendre 30-60s pour pusher toutes les plateformes"
          echo "  - Attente de sécurité: 60 secondes"
          echo ""
          sleep 60

      - name: Verify image in registry
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Vérification de l'image dans GHCR..."
          IMAGE_URL="ghcr.io/${{ github.repository }}:${IMAGE_TAG}"

          # Login au registre pour accéder aux images privées
          echo "$GITHUB_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Vérification avec retries (max 5 tentatives, 15s entre chaque)
          MAX_RETRIES=5
          RETRY_DELAY=15

          for i in $(seq 1 $MAX_RETRIES); do
            echo "Tentative $i/$MAX_RETRIES..."

            if docker manifest inspect "$IMAGE_URL" > /dev/null 2>&1; then
              echo "✅ Image vérifiée et disponible dans GHCR!"
              echo "📦 Manifest:"
              docker manifest inspect "$IMAGE_URL" | jq -r '.manifests[] | "  - \(.platform.os)/\(.platform.architecture)"'
              exit 0
            else
              if [ $i -lt $MAX_RETRIES ]; then
                echo "⚠️  Image non encore disponible, nouvelle tentative dans ${RETRY_DELAY}s..."
                sleep $RETRY_DELAY
              else
                echo "❌ Erreur: Image toujours indisponible après $MAX_RETRIES tentatives"
                echo "Image recherchée: $IMAGE_URL"
                echo ""
                echo "Vérification manuelle nécessaire:"
                echo "  docker manifest inspect $IMAGE_URL"
                exit 1
              fi
            fi
          done

      - name: Deploy to Render
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.tag }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "🚀 Déploiement automatique sur Render..."
          echo "Image: ghcr.io/${{ github.repository }}:${IMAGE_TAG}"
          echo ""
          echo "📋 Contexte de déploiement:"
          echo "  - Event: ${{ github.event_name }}"
          echo "  - Workflow run event: ${{ github.event.workflow_run.event }}"
          echo "  - Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "  - Image tag: ${IMAGE_TAG}"
          echo ""

          # Force Render à repuller l'image :latest via l'API
          if [ -n "$RENDER_API_KEY" ] && [ -n "$RENDER_SERVICE_ID" ]; then
            echo "🔄 Déclenchement du redéploiement via API Render..."

            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
              -H "Authorization: Bearer ${RENDER_API_KEY}" \
              -H "Content-Type: application/json" \
              -d '{"clearCache":"clear"}')

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | head -n -1)

            if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Redéploiement déclenché avec succès!"
              echo "$BODY" | jq -r '.id' || echo "$BODY"
            else
              echo "⚠️  Erreur lors du déclenchement (HTTP $HTTP_CODE)"
              echo "$BODY"
              echo ""
              echo "💡 Le déploiement automatique de Render prendra le relais."
            fi
          else
            echo "ℹ️  API Render non configurée (RENDER_API_KEY ou RENDER_SERVICE_ID manquant)"
            echo "💡 Render détectera automatiquement la nouvelle image :latest"
            echo "   Configuration requise dans Settings → Secrets:"
            echo "   - RENDER_API_KEY: Clé API depuis https://dashboard.render.com/u/settings"
            echo "   - RENDER_SERVICE_ID: ID du service (srv-xxxxx)"
          fi

      - name: Wait for deployment
        run: |
          echo "⏳ Attendre 2 minutes pour le déploiement Render..."
          sleep 120

      - name: Verify deployment
        run: |
          # Remplacez par votre URL Render une fois déployé
          RENDER_URL="https://pdf-xml-asycuda-api.onrender.com"

          echo "🔍 Vérification du déploiement sur $RENDER_URL..."

          # Retry logic pour gérer le cold start
          for i in {1..5}; do
            if curl -f -s "$RENDER_URL/api/v1/health" > /dev/null; then
              echo "✅ API disponible!"
              curl -s "$RENDER_URL/api/v1/health" | jq .
              exit 0
            else
              echo "Tentative $i/5 - En attente..."
              sleep 30
            fi
          done

          echo "⚠️  Impossible de vérifier le déploiement"
          echo "Vérifiez manuellement: $RENDER_URL/api/v1/health"
          exit 1

      - name: Deployment summary
        if: always()
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.tag }}
          RENDER_URL: "https://pdf-xml-asycuda-api.onrender.com"
        run: |
          echo "📊 Résumé du déploiement"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Repository: ${{ github.repository }}"
          echo "Image: ghcr.io/${{ github.repository }}:${IMAGE_TAG}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔗 Dashboard Render: https://dashboard.render.com"
          echo "📖 Documentation: ${RENDER_URL}/docs"
          echo "❤️  Health Check: ${RENDER_URL}/api/v1/health"

  # Optionnel: Notifier l'équipe
  notify:
    name: Notification
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment notification
        run: |
          STATUS="${{ needs.deploy.result }}"

          if [ "$STATUS" == "success" ]; then
            echo "✅ Déploiement réussi sur Render!"
          elif [ "$STATUS" == "failure" ]; then
            echo "❌ Échec du déploiement sur Render"
          else
            echo "⚠️  Statut de déploiement: $STATUS"
          fi

          # Ici vous pouvez ajouter des notifications Slack, Discord, Email, etc.
          # Exemple Slack webhook:
          # curl -X POST $SLACK_WEBHOOK -d '{"text":"Déploiement '$STATUS'"}'
